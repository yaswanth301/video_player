
//polymorphism

let extend = function(){
}

function Shape (){
}
Shape.prototype.duplicate = function(){
  console.log("duplicate Shape");
}

function Circle(){
}
extend(Circle, Shape);
Circle.prototype.duplicate = function(){
  console.log("duplicate circle");
}
function Square(){
}
extend(Square, Shape);
Square.prototype.duplicate = function(){
  console.log("duplicate Square");
}

const methods = [
new Square(),
new Circle()
];

for (let shape of methods){
shape.duplicate()
    duplicateShape();
}

//mixins
function mixins(target ,...sources){(... is rest operater all arugments and turn into array & sources is an array)
  Object.assign(target ,...sources)} (...spread  operater bcz we need to pass in multiple arguments of array)
  
  let  canWalk={
    walk:function(){
    console.log("walk");
  }
  };
  let  canEat={
    eat:function(){
    console.log("eat");
  }
  };
  let  canSwim={
    swim:function(){
    console.log("swim");
  }
  };
  function Person (){
  }
  mixins(Person.prototype,canEat,canWalk);
  const person = new Person();
  console.log(person);
  function GoldFish (){
  }
  mixins(GoldFish.prototype,canEat,canSwim);
  const fish = new GoldFish();
  console.log(fish);
  
  //classes

class Circle {
  constructor(radius){
    this.radius=radius;
    this.move = function(){
      console.log("move");
    }
  }
  draw(){
    console.log("draw");
  }
}
const c = new Circle(1); // without new it will not invoked class consructor//
console.log(c);


//class hoisting//
const c = new Circle(1); //circle cant be access before intilization//
console.log(c);

class Circle{
constructor(radius){
  this.radius=radius;
  this.move = function(){
    console.log("move");
  }
}
draw(){
  console.log("draw");
}
}

class Circle {
  constructor(radius) {
    this.radius = radius;
  }
  draw() {
    console.log("draw");
  }
  //static method
  static parse(str) {
    const radius = JSON.parse(str).radius;
   return new Circle(radius);
  }
}
const circle = Circle.parse('{"radius":1}'); //circle cant be access before intilization//
console.log(circle);


class Math2 {
static abs(value){
}
}

Math2.abs()
